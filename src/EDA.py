import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats

if __name__ == '__main__':
    plt.style.use('ggplot')

    # Finding White win %, Black win %, draw %

    # determined by running grep Event data/pgn/2013-2014-blitz.pgn
    # grep 'Result "1-0"' data/pgn/2013-2014-blitz.pgn
    # grep 'Result "0-1"' data/pgn/2013-2014-blitz.pgn

    total_games = 5261428
    white_wins = 2652185
    black_wins = 2413062
    draws = total_games - white_wins - black_wins

    fig, ax = plt.subplots(figsize=(5, 4))

    ax.bar(['White wins', 'Black wins', 'Draw'],
        [white_wins / total_games, black_wins / total_games, draws / total_games],
        color=['navajowhite', 'darkslategray', 'blue'],
        edgecolor=['black', 'black', 'black'])

    ax.set_title('Results of amateur blitz games', fontsize=22)

    plt.xticks(size=15)
    ax.set_ylabel('Percentage of games', fontsize=18)
    ax.set_yticklabels(np.arange(0, 60, 10), fontsize=11)

    plt.savefig('../images/win_loss_draw_bar.png')


    # Plotting games by material balance when material is equal

    # determined by running cat data/pgn/white_<tag>.pgn data/pgn/black_<tag>.pgn | grep Event | wc -l

    bvn_games = 1280127
    equal_games = 349853
    bpvnp_games = 59698
    nbvrp_games = 24953
    qv2r_games = 4441

    fig, axs = plt.subplots(2, 1, figsize=(12, 9))

    plt.suptitle('Breakdown of games by material balance', fontsize=25)

    plt.xticks(size=15)
    axs[0].bar(['Total', 'Bishop v. Knight', 'Equal (-3+ pawns)',
                'Bishop pair v. Knight pair', 'B & N v. R & P', 'Queen v. 2 Rooks'],
                [total_games, bvn_games, equal_games, bpvnp_games, nbvrp_games, qv2r_games],
                color=['blue', 'blue', 'blue', 'red', 'red', 'red'])
    axs[0].set_yticklabels(np.arange(6), fontsize=15)
    axs[0].set_ylabel('Number of games (millions)', fontsize=20)


    axs[1].bar(['Bishop pair v. Knight pair', 'Bishop & Knight v. Rook & Pawn', 'Queen v. 2 Rooks'],
                [bpvnp_games / total_games, nbvrp_games / total_games, qv2r_games / total_games],
                color='red')
    axs[1].set_ylabel("Percentage of total games", fontsize=20)
    axs[1].set_yticklabels([0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2], fontsize=15)

    fig.tight_layout()
    plt.savefig('../images/total_games_bar.png')
    # plt.show()


    # Bishop pair v. Knight pair: loading information generated by Bash scripts into Pandas DataFrame

    bpvnp_material_df = pd.read_csv('../data/csv/bpvnp_by_material.csv', delimiter='|')
    bpvnp_material_df['win_rate'] = (bpvnp_material_df['wins'] /
                                    bpvnp_material_df[['wins','draws','losses']].sum(axis=1))
    bpvnp_material_df['draw_rate'] = (bpvnp_material_df['draws'] /
                                    bpvnp_material_df[['wins','draws','losses']].sum(axis=1))
    bpvnp_material_df['loss_rate'] = (1 - bpvnp_material_df['win_rate'] -
                                    bpvnp_material_df['draw_rate'])
    bpvnp_material_df['average_points'] = (bpvnp_material_df['win_rate'] +
                                        0.5 * bpvnp_material_df['draw_rate'])


    # Bishop pair v. Knight pair: plotting results by amount of material remaining

    fig, ax = plt.subplots(figsize=(15,12))

    ax.plot(bpvnp_material_df['material'], bpvnp_material_df['win_rate'],
            linewidth=5, color='mediumseagreen')
    ax.plot(bpvnp_material_df['material'], bpvnp_material_df['loss_rate'],
            linewidth=5, color='salmon')
    ax.plot(bpvnp_material_df['material'], bpvnp_material_df['average_points'],
            linewidth=5, color='black')
    ax.plot([28, 33], [0.5, 0.5], color='crimson')

    ax.set_title('Results by amount of material remaining in BB v. NN', fontsize=22)

    ax.legend(['Win rate', 'Loss rate', 'Average point result', 'Expected point result'],
                prop={'size': 12})

    ax.set_xlabel('Material points remaining', fontsize=20)

    ax.set_xticks(np.arange(28, 34))
    ax.set_xticklabels(['28 or fewer', '29', '30', '31', '32', '33'],
                        fontdict={'fontsize': 15})

    plt.yticks(size=15)

    ax.invert_xaxis()
                        
    plt.savefig('../images/bbnn_by_material.png')
    # plt.show()


    # Knight and Bishop v. Rook and Pawn: loading information from Bash scripts into Pandas DataFrame

    nbvrp_df = pd.read_csv('../data/csv/nbvrp_by_queens.csv', delimiter="|")
    nbvrp_df['win_rate'] = nbvrp_df['wins'] / nbvrp_df[['wins','draws','losses']].sum(axis=1)
    nbvrp_df['draw_rate'] = nbvrp_df['draws'] / nbvrp_df[['wins','draws','losses']].sum(axis=1)
    nbvrp_df['loss_rate'] = nbvrp_df['losses'] / nbvrp_df[['wins','draws','losses']].sum(axis=1)


    # Knight and Bishop v. Rook and Pawn: plotting a stacked bar chart of results by queen presence

    fig, ax = plt.subplots(figsize=(10, 12))

    x = ['All games', 'Queens on', 'Queens off']
    y1 = nbvrp_df['win_rate']
    y2 = nbvrp_df['draw_rate']
    y3 = nbvrp_df['loss_rate']
    y4 = 0.005

    ax.bar(x, y1, color='mediumseagreen')
    ax.bar(x, y2, bottom=y1, color='white')
    ax.bar(x, y3, bottom=y1+y2, color='salmon')
    ax.bar(x, y4, bottom=0.4975, color='crimson')

    ax.set_title('Bishop & knight v. rook & pawn by queen presence', fontsize=23)

    ax.legend(['Wins','Draws','Losses','50% mark'],
                prop={'size': 15})

    plt.xticks(size=20)
    plt.yticks(size=20)
    ax.set_yticks(np.arange(0, 1.2, 0.2))
    ax.set_yticklabels(['0%','20%','40%','60%','80%','100%'])
                        
    plt.savefig('../images/nbvrp_by_queens.png')
    # plt.show()


    # Queen v. 2 Rooks: loading information generated by Bash scripts into Pandas DataFrame

    qv2r_df = pd.read_csv('../data/csv/qv2r_by_pawns.csv', delimiter="|")
    qv2r_df['win_rate'] = qv2r_df['wins'] / qv2r_df[['wins','draws','losses']].sum(axis=1)
    qv2r_df['draw_rate'] = qv2r_df['draws'] / qv2r_df[['wins','draws','losses']].sum(axis=1)
    qv2r_df['loss_rate'] = qv2r_df['losses'] / qv2r_df[['wins','draws','losses']].sum(axis=1)
    qv2r_df['average_points'] = qv2r_df['win_rate'] + 0.5 * qv2r_df['draw_rate']


    # Queen v. 2 Rooks: plotting results by number of pawns remaining on the board

    x = qv2r_df['num_pawns']

    fig, ax = plt.subplots(figsize=(15, 12))
    ax.plot(qv2r_df['win_rate'], label='Win rate', color='mediumseagreen')
    ax.plot(qv2r_df['draw_rate'], label='Draw rate', color='blue')
    ax.plot(qv2r_df['loss_rate'], label='Loss rate', color='salmon')
    ax.plot(qv2r_df['average_points'], label='Average point result',
            linewidth=5, color='black')

    ax.set_title('Results in Q v. 2 Rooks by number of pawns remaining', fontsize=22)
    ax.set_xlabel('Number of pawns remaining after exchange', fontsize=20)
    ax.set_xticklabels(['','7 or more', '6','5','4','3','2','1 or fewer'], fontsize=15)
    plt.yticks(size=15)

    ax.legend(prop={'size': 12})

    plt.savefig('../images/qv2r_by_pawns.png')
    # plt.show()


    # Queen v. 2 Rooks: plotting best fit line and including Spearman Rank-Order correlation

    rho, p = stats.spearmanr(np.arange(1, 8), qv2r_df['average_points'])

    m, b, _, _, _ = stats.linregress(np.arange(1, 8), qv2r_df['average_points'])

    x = qv2r_df['num_pawns']

    fig, ax = plt.subplots(figsize=(15, 12))
    ax.plot(qv2r_df['average_points'], label='Average point result',
            linewidth=5, color='black')
    ax.plot([0, 6], [b, 6 * m + b], label='Least squares line of best fit')

    ax.set_title('Results in Q v. 2 Rooks by number of pawns remaining', fontsize=22)
    ax.set_xlabel('Number of pawns remaining after exchange', fontsize=20)
    ax.set_xticklabels(['','7 or more', '6','5','4','3','2','1 or fewer'], fontsize=15)
    plt.yticks(size=15)

    ax.legend(prop={'size': 12})
    ax.annotate(fr'''$\rho$ = {round(rho, 2)}
    p = {round(p, 2)}''',
                (2.35, 0.46), size=14)

    plt.savefig('../images/qv2r_by_pawns_best_fit_with_spearmanr.png')
    # plt.show()